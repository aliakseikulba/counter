{"version":3,"sources":["components/Counter/Counter.module.css","components/Setter/Setter.module.css","components/Btn/Btn.module.css","components/Controller/Controller.module.css","components/Btn/Btn.tsx","components/Counter/Counter.tsx","components/Setter/Setter.tsx","components/Controller/Controller.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Btn","callback","isDisabled","name","btnClass","s","disabled","btn","className","onClick","Counter","counter","startValue","maxValue","incrementValue","resetValue","changeValue","counterClass","counterFinal","errorTitle","counterForRender","Math","floor","display","counterTitle","buttonsArea","Setter","inputValue","setterClass","errorSetter","setter","valueForRender","Number","isInteger","toString","settings","settingsTitle","value","onChange","type","Controller","changeStartValue","changeMaxValue","changeCounter","setChangeValue","isChanged","e","currentTarget","App","useState","localStorage","getItem","setStartValue","setMaxValue","setCounter","useEffect","setItem","JSON","stringify","num","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b24f913.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Counter_display__2IUo3\",\"counter\":\"Counter_counter__2d6O8\",\"counterFinal\":\"Counter_counterFinal__1xsDE\",\"counterTitle\":\"Counter_counterTitle__3hzE6\",\"errorTitle\":\"Counter_errorTitle__29Nip\",\"buttonsArea\":\"Counter_buttonsArea__21vEO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Setter_settings__1fg4S\",\"settingsTitle\":\"Setter_settingsTitle__2V7Ci\",\"setter\":\"Setter_setter__2RaZh\",\"errorSetter\":\"Setter_errorSetter__32SC9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Btn_btn__3iWZQ\",\"disabled\":\"Btn_disabled__2NUhn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Controller_display__281Hm\",\"buttonsArea\":\"Controller_buttonsArea__26rxY\"};","import React from 'react';\nimport s from './Btn.module.css';\n\ntype BtnPropsType = {\n  callback: () => void\n  isDisabled: boolean\n  name: string\n}\n\nconst Btn = ({callback, isDisabled, name}: BtnPropsType) => {\n\n  const btnClass = isDisabled ? `${s.disabled}` : `${s.btn}`;\n\n  return (\n    <>\n      <button className={btnClass} onClick={callback} disabled={isDisabled}>{name}</button>\n    </>\n  );\n};\n\nexport {Btn};","import React from 'react';\nimport s from './Counter.module.css';\nimport {Btn} from '../Btn/Btn';\n\ntype CounterPropsType = {\n  counter: number | string\n  startValue: number | string\n  maxValue: number | string\n  changeValue: boolean\n  incrementValue: () => void\n  resetValue: () => void\n}\n\nconst Counter = ({\n                   counter,\n                   startValue,\n                   maxValue,\n                   incrementValue,\n                   resetValue,\n                   changeValue\n                 }: CounterPropsType) => {\n\n\n  const counterClass = counter >= maxValue ? s.counterFinal : s.counter;\n  const errorTitle = () => startValue >= maxValue || startValue < 0;\n\n  const disableIncrementBtn = () => {\n    return counter >= maxValue;\n  };\n  const disableResetBtn = () => {\n    return counter >= startValue;\n  };\n\n  const counterForRender = +counter > maxValue ? Math.floor(+counter) : counter;\n\n  return (\n    <>\n      <div className={s.display}>\n        {!changeValue && <div className={counterClass}>{counterForRender}</div>}\n        {changeValue && !errorTitle() && <div className={s.counterTitle}>change value and press 'Set'</div>}\n        {errorTitle() && <div className={s.errorTitle}>incorrect value!</div>}\n      </div>\n      <div className={s.buttonsArea}>\n        <Btn callback={incrementValue} isDisabled={changeValue || disableIncrementBtn()} name={'Inc'}/>\n        <Btn callback={resetValue} isDisabled={changeValue || disableResetBtn()} name={'Reset'}/>\n      </div>\n    </>\n  );\n};\n\nexport {Counter};","import React, {ChangeEvent} from 'react';\nimport s from './Setter.module.css';\n\ntype SetterPropsType = {\n  name: string\n  startValue: number | string\n  maxValue: number | string\n  inputValue: number | string\n  changeValue: (e: ChangeEvent<HTMLInputElement>) => void\n}\n\nconst Setter = ({name, startValue, maxValue, inputValue, changeValue}: SetterPropsType) => {\n\n  const setterClass = startValue < 0 || startValue >= maxValue ? s.errorSetter : s.setter;\n\n  const valueForRender = Number.isInteger(+inputValue) ? inputValue.toString() : Math.floor(+inputValue).toString();\n\n  return (\n    <div className={s.settings}>\n      <div className={s.settingsTitle}>{name}</div>\n      <input className={setterClass}\n             value={valueForRender}\n             onChange={changeValue}\n             type=\"number\"/>\n    </div>\n  );\n};\n\nexport {Setter};","import React, {ChangeEvent} from 'react';\nimport s from './Controller.module.css';\nimport {Btn} from '../Btn/Btn';\nimport {Setter} from '../Setter/Setter';\n\ntype ControllerPropsType = {\n  startValue: number | string\n  maxValue: number | string\n  setChangeValue: (changeValue: boolean) => void\n  changeStartValue: (num: number | string) => void\n  changeMaxValue: (num: number | string) => void\n  changeCounter: () => void\n  isChanged: boolean\n}\n\nconst Controller = ({\n                      startValue,\n                      maxValue,\n                      changeStartValue,\n                      changeMaxValue,\n                      changeCounter,\n                      setChangeValue,\n                      isChanged\n                    }: ControllerPropsType) => {\n\n  const onStartValueChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value === '' ? '' : Number(e.currentTarget.value);\n    changeStartValue(value);\n  };\n  const onMaxValueChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value === '' ? '' : Number(e.currentTarget.value);\n    changeMaxValue(value);\n  };\n  const setValueToCounter = () => {\n    setChangeValue(false);\n    changeCounter();\n  };\n\n  const setterBtnDisable = () => startValue >= maxValue ||\n    startValue < 0 || startValue === '' || maxValue === '' || !isChanged;\n\n  return (\n    <>\n      <div className={s.display}>\n        <Setter name=\"start value:\"\n                startValue={startValue}\n                maxValue={maxValue}\n                inputValue={startValue}\n                changeValue={onStartValueChange}/>\n        <Setter name=\"max value:\"\n                startValue={startValue}\n                maxValue={maxValue}\n                inputValue={maxValue}\n                changeValue={onMaxValueChange}/>\n      </div>\n      <div className={s.buttonsArea}>\n        <Btn callback={setValueToCounter} isDisabled={setterBtnDisable()} name={'Set'}/>\n      </div>\n    </>\n  );\n};\n\nexport {Controller};","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Counter} from './components/Counter/Counter';\nimport {Controller} from './components/Controller/Controller';\n\nfunction App() {\n\n  const [startValue, setStartValue] = useState<number | string>(Number(localStorage.getItem('startValue')) || 0);\n  const [maxValue, setMaxValue] = useState<number | string>(Number(localStorage.getItem('maxValue')) || 5);\n  const [counter, setCounter] = useState<number | string>(startValue);\n  const [changeValue, setChangeValue] = useState<boolean>(true);\n\n  const changeStartValue = (num: number | string) => {\n    setChangeValue(true);\n    setStartValue(num);\n  };\n  const changeMaxValue = (num: number | string) => {\n    setChangeValue(true);\n    setMaxValue(num);\n  };\n  const changeCounter = () => {\n    setCounter(startValue);\n  };\n  const incrementValue = () => {\n    setCounter(counter => +counter + 1);\n  };\n  const resetValue = () => {\n    setCounter(startValue);\n  };\n\n\n  useEffect(() => {\n    localStorage.setItem('startValue', JSON.stringify(startValue));\n    localStorage.setItem('maxValue', JSON.stringify(maxValue));\n  }, [startValue, maxValue]);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">custom counter</h1>\n      <div className=\"content\">\n        <div className=\"wrapper\">\n          <Controller startValue={startValue}\n                      maxValue={maxValue}\n                      setChangeValue={setChangeValue}\n                      changeStartValue={changeStartValue}\n                      changeMaxValue={changeMaxValue}\n                      changeCounter={changeCounter}\n                      isChanged={changeValue}/>\n        </div>\n        <div className=\"wrapper\">\n          <Counter counter={counter}\n                   startValue={startValue}\n                   maxValue={maxValue}\n                   changeValue={changeValue}\n                   incrementValue={incrementValue}\n                   resetValue={resetValue}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}