{"version":3,"sources":["components/Counter/Counter.module.css","components/Setter/Setter.module.css","components/Btn/Btn.module.css","components/Controller/Controller.module.css","components/Btn/Btn.tsx","components/Counter/Counter.tsx","components/Setter/Setter.tsx","components/Controller/Controller.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Btn","callback","isDisabled","name","onDisabled","btnClass","s","disabled","btn","className","onClick","Counter","counter","startValue","maxValue","incrementValue","resetValue","contentClass","contentFinal","content","display","buttonsArea","Setter","value","changeValue","settings","settingsTitle","valueInput","onChange","type","Controller","changeStartValue","changeMaxValue","changeCounter","e","Number","currentTarget","App","useState","setStartValue","setMaxValue","setCounter","num","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,aAAe,8BAA8B,YAAc,+B,gBCAnJD,EAAOC,QAAU,CAAC,SAAW,yBAAyB,cAAgB,8BAA8B,WAAa,6B,kBCAjHD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,SAAW,wB,gBCApDD,EAAOC,QAAU,CAAC,QAAU,4BAA4B,YAAc,kC,gLCQhEC,EAAM,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,KAE5BC,EAAaF,IACbG,EAAqB,UAAVD,EAAgBE,IAAEC,SAAgBD,IAAEE,KAErD,OACE,mCACE,wBAAQC,UAAWJ,EAAUK,QAAST,EAAUM,SAAUH,EAA1D,SAAuED,OCJvEQ,EAAU,SAAC,GAAmF,IAAlFC,EAAiF,EAAjFA,QAASC,EAAwE,EAAxEA,WAAYC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,eAAgBC,EAAkC,EAAlCA,WAGzDC,EAAe,UAAAL,IAAYE,EAAcR,IAAEY,aAAoBZ,IAAEa,SAUvE,OACE,qCACE,qBAAKV,UAAWH,IAAEc,QAAlB,SACE,qBAAKX,UAAWQ,EAAhB,SAA+BL,MAEjC,sBAAKH,UAAWH,IAAEe,YAAlB,UACE,cAAC,EAAD,CAAKpB,SAAUc,EAAgBb,WAdT,WAC1B,OAAQU,IAAYE,GAagDX,KAAM,QACtE,cAAC,EAAD,CAAKF,SAAUe,EAAYd,WAZT,WACtB,OAAQU,IAAYC,GAWwCV,KAAM,iB,gCCvBhEmB,EAAS,SAAC,GAAiD,IAAhDnB,EAA+C,EAA/CA,KAAMoB,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,YAI5B,OACE,sBAAKf,UAAWH,IAAEmB,SAAlB,UACE,qBAAKhB,UAAWH,IAAEoB,cAAlB,SAAkCvB,IAClC,uBAAOM,UAAWH,IAAEqB,WACbJ,MAAOA,EACPK,SAAUJ,EACVK,KAAK,eCNZC,EAAa,SAAC,GAAkG,IAAjGjB,EAAgG,EAAhGA,WAAYC,EAAoF,EAApFA,SAAUiB,EAA0E,EAA1EA,iBAAkBC,EAAwD,EAAxDA,eAAgBC,EAAwC,EAAxCA,cAgB3E,OACE,qCACE,sBAAKxB,UAAWH,IAAEc,QAAlB,UACC,cAAC,EAAD,CAAQjB,KAAK,eACJoB,MAAOV,EACRW,YAnBc,SAACU,GAC1B,IAAMX,EAAQY,OAAOD,EAAEE,cAAcb,OACrCQ,EAAiBR,MAkBb,cAAC,EAAD,CAAQpB,KAAK,aACLoB,MAAOT,EAAUU,YAhBN,SAACU,GACxB,IAAMX,EAAQY,OAAOD,EAAEE,cAAcb,OACrCS,EAAeT,SAgBb,qBAAKd,UAAWH,IAAEe,YAAlB,SACE,cAAC,EAAD,CAAKpB,SAde,WACxBgC,KAasC/B,WAAY,kBAAM,GAAOC,KAAM,cCa1DkC,MA/Cf,WAAgB,IAAD,EAEuBC,mBAAiB,GAFxC,mBAENzB,EAFM,KAEM0B,EAFN,OAGmBD,mBAAiB,GAHpC,mBAGNxB,EAHM,KAGI0B,EAHJ,OAIiBF,mBAAiBzB,GAJlC,mBAIND,EAJM,KAIG6B,EAJH,KAwBb,OACE,sBAAKhC,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,4BACA,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,UAAf,SACE,cAAC,EAAD,CAAYI,WAAYA,EACZC,SAAUA,EACViB,iBAzBK,SAACW,GACxBH,EAAcG,IAyBIV,eAvBG,SAACU,GACtBF,EAAYE,IAuBMT,cApBE,WACpBQ,EAAW5B,QAqBP,qBAAKJ,UAAU,UAAf,SACE,cAAC,EAAD,CAASG,QAASA,EACTC,WAAYA,EACZC,SAAUA,EACVC,eAtBM,WACrB0B,GAAW,SAAA7B,GAAO,OAAIA,EAAU,MAsBjBI,WApBE,WACjByB,EAAW5B,eCZA8B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8da1d108.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Counter_display__2IUo3\",\"content\":\"Counter_content__3yIHH\",\"contentFinal\":\"Counter_contentFinal__3JBtA\",\"buttonsArea\":\"Counter_buttonsArea__21vEO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Setter_settings__1fg4S\",\"settingsTitle\":\"Setter_settingsTitle__2V7Ci\",\"valueInput\":\"Setter_valueInput__ynQzW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Btn_btn__3iWZQ\",\"disabled\":\"Btn_disabled__2NUhn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Controller_display__281Hm\",\"buttonsArea\":\"Controller_buttonsArea__26rxY\"};","import React from 'react';\nimport s from './Btn.module.css';\n\ntype BtnPropsType = {\n  callback: () => void\n  isDisabled: () => boolean\n  name: string\n}\n\nconst Btn = ({callback, isDisabled, name}: BtnPropsType) => {\n\n  const onDisabled = isDisabled();\n  const btnClass = onDisabled ? `${s.disabled}` : `${s.btn}`;\n\n  return (\n    <>\n      <button className={btnClass} onClick={callback} disabled={onDisabled}>{name}</button>\n    </>\n  );\n};\n\nexport {Btn};","import React, {useState} from 'react';\nimport s from './Counter.module.css';\nimport {Btn} from '../Btn/Btn';\n\ntype CounterPropsType = {\n  counter: number\n  startValue: number\n  maxValue: number\n  incrementValue: () => void\n  resetValue: () => void\n}\n\nconst Counter = ({counter, startValue, maxValue, incrementValue, resetValue}: CounterPropsType) => {\n\n\n  const contentClass = counter === maxValue ? `${s.contentFinal}` : `${s.content}`;\n\n  const disableIncrementBtn = () => {\n    return (counter === maxValue);\n  };\n  const disableResetBtn = () => {\n    return (counter === startValue);\n  };\n\n\n  return (\n    <>\n      <div className={s.display}>\n        <div className={contentClass}>{counter}</div>\n      </div>\n      <div className={s.buttonsArea}>\n        <Btn callback={incrementValue} isDisabled={disableIncrementBtn} name={'Inc'}/>\n        <Btn callback={resetValue} isDisabled={disableResetBtn} name={'Reset'}/>\n      </div>\n    </>\n  );\n};\n\nexport {Counter};","import React, {ChangeEvent} from 'react';\nimport s from './Setter.module.css';\n\ntype SetterPropsType = {\n  name: string\n  value: number\n  changeValue: (e: ChangeEvent<HTMLInputElement>) => void\n}\n\nconst Setter = ({name, value, changeValue}: SetterPropsType) => {\n\n\n\n  return (\n    <div className={s.settings}>\n      <div className={s.settingsTitle}>{name}</div>\n      <input className={s.valueInput}\n             value={value}\n             onChange={changeValue}\n             type=\"number\"/>\n    </div>\n  );\n};\n\nexport {Setter};","import React, {ChangeEvent} from 'react';\nimport s from './Controller.module.css'\nimport {Btn} from '../Btn/Btn';\nimport {Setter} from '../Setter/Setter';\n\ntype ControllerPropsType = {\n  startValue: number\n  maxValue: number\n  changeStartValue: (num: number) => void\n  changeMaxValue: (num: number) => void\n  changeCounter: () => void\n}\n\nconst Controller = ({startValue, maxValue, changeStartValue, changeMaxValue, changeCounter}: ControllerPropsType) => {\n\n  const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n    const value = Number(e.currentTarget.value);\n    changeStartValue(value)\n  }\n\n  const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n    const value = Number(e.currentTarget.value);\n    changeMaxValue(value);\n  }\n\n  const setValueToCounter = () => {\n    changeCounter();\n  }\n\n  return (\n    <>\n      <div className={s.display}>\n       <Setter name=\"start value:\"\n                value={startValue}\n               changeValue={onChangeStartValue}/>\n        <Setter name=\"max value:\"\n                value={maxValue} changeValue={onChangeMaxValue}/>\n      </div>\n      <div className={s.buttonsArea}>\n        <Btn callback={setValueToCounter} isDisabled={() => false} name={'Set'}/>\n      </div>\n    </>\n  );\n};\n\nexport {Controller};","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from './components/Counter/Counter';\nimport {Controller} from './components/Controller/Controller';\n\nfunction App() {\n\n  const [startValue, setStartValue] = useState<number>(0);\n  const [maxValue, setMaxValue] = useState<number>(5);\n  const [counter, setCounter] = useState<number>(startValue);\n\n  const changeStartValue = (num: number) => {\n    setStartValue(num);\n  };\n  const changeMaxValue = (num: number) => {\n    setMaxValue(num);\n  };\n\n  const changeCounter = () => {\n    setCounter(startValue);\n  }\n\n  const incrementValue = () => {\n    setCounter(counter => counter + 1);\n  };\n  const resetValue = () => {\n    setCounter(startValue);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">custom counter</h1>\n      <div className=\"content\">\n        <div className=\"wrapper\">\n          <Controller startValue={startValue}\n                      maxValue={maxValue}\n                      changeStartValue={changeStartValue}\n                      changeMaxValue={changeMaxValue}\n                      changeCounter={changeCounter}/>\n        </div>\n        <div className=\"wrapper\">\n          <Counter counter={counter}\n                   startValue={startValue}\n                   maxValue={maxValue}\n                   incrementValue={incrementValue}\n                   resetValue={resetValue}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}